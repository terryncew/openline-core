name: Schema check

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install jsonschema==4.22.0

      - name: Validate vectors (and optional receipt)
        run: |
          set -euo pipefail
          python - <<'PY'
          import json, os, sys, glob
          from jsonschema import Draft7Validator

          def load_json(p):
              with open(p, "r", encoding="utf-8") as f:
                  return json.load(f)

          def find_first(candidates):
              for p in candidates:
                  if os.path.exists(p):
                      return p
              return None

          def check(schema_path, instance_path):
              global ok
              print(f"\n==> {instance_path} against {schema_path}")
              try:
                  schema = load_json(schema_path)
                  inst   = load_json(instance_path)
                  errs = sorted(
                      Draft7Validator(schema).iter_errors(inst),
                      key=lambda e: (list(e.path), e.message)
                  )
                  if not errs:
                      print("OK")
                  else:
                      ok = False
                      for e in errs:
                          loc = "/".join(map(str, e.path)) or "(root)"
                          print(f"FAIL: {loc}: {e.message}")
              except FileNotFoundError as e:
                  ok = False
                  print(f"FAIL: missing file: {e.filename}")
              except Exception as e:
                  ok = False
                  print(f"FAIL: {type(e).__name__}: {e}")

          # Show JSON files we can see (helps on mobile)
          print("Repo JSON files:")
          for p in sorted(glob.glob("**/*.json", recursive=True)):
              print("  ", p)

          ok = True

          # Candidate locations (root or under schemas/)
          receipt_schema = find_first([
              "schemas/receipt.schema.json", "receipt.schema.json"
          ]) or "schemas/receipt.schema.json"

          frame_schema = find_first([
              "schemas/frame.schema.json", "frame.schema.json"
          ]) or "schemas/frame.schema.json"

          receipt_vec = find_first([
              "schemas/vectors/receipt-min.json",
              "vectors/receipt-min.json",
              "schemas/examples/receipt-min.json",
          ]) or "schemas/vectors/receipt-min.json"

          frame_vec = find_first([
              "schemas/vectors/frame-min.json",
              "vectors/frame-min.json",
              "schemas/examples/frame-min.json",
          ]) or "schemas/vectors/frame-min.json"

          # Required vector checks
          check(receipt_schema, receipt_vec)
          check(frame_schema,   frame_vec)

          # Optional repo receipt (if present)
          repo_receipt = find_first([
              "docs/receipt.latest.json", "receipt.latest.json"
          ])
          if repo_receipt:
              check(receipt_schema, repo_receipt)
          else:
              print("\n(skip) no docs/receipt.latest.json")

          sys.exit(0 if ok else 1)
          PY
