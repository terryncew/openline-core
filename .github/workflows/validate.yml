name: Schema check

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: python -m pip install --upgrade pip jsonschema

      - name: Validate receipts against schema
        run: |
          python - <<'PY'
          import json, sys, pathlib, glob
          from jsonschema import Draft202012Validator

          repo = pathlib.Path(__file__).resolve().parents[2]
          schema_path = repo / "schemas" / "receipt.schema.json"

          try:
              schema = json.loads(schema_path.read_text(encoding="utf-8"))
          except Exception as e:
              print(f"::error file={schema_path}::Cannot read schema: {e}")
              sys.exit(1)

          validator = Draft202012Validator(schema)

          # Files to check (skip gracefully if missing)
          candidates = [
              repo / "docs" / "receipt.latest.json",
              *pathlib.Path(repo / "schemas" / "vectors").glob("receipt*.json"),
          ]

          rc = 0
          for p in candidates:
              if not p.exists():
                  print(f"::warning file={p}::Missing file; skipped")
                  continue
              try:
                  data = json.loads(p.read_text(encoding="utf-8"))
              except Exception as e:
                  print(f"::error file={p}::Invalid JSON: {e}")
                  rc = 1
                  continue

              errs = list(validator.iter_errors(data))
              if errs:
                  for e in errs[:50]:
                      loc = "/".join(map(str, e.path)) or "$"
                      print(f"::error file={p}::{loc}: {e.message}")
                  rc = 1
              else:
                  print(f"OK {p}")

          sys.exit(rc)
          PY
