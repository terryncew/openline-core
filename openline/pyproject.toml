[build-system]
requires = ["hatchling>=1.25.0"]
build-backend = "hatchling.build"

[project]
name = "openline"
version = "0.1.0"
description = "Open Line Protocol (OLP) — shape-native messaging for AI agents with frozen schema, guards, digest+Δ_hol, and a one-command FastAPI demo."
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.11"
authors = [{ name = "OpenLine Contributors" }]
keywords = ["agents", "protocol", "topology", "graph", "fastapi", "crdt"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Software Development :: Libraries",
  "Topic :: Internet :: WWW/HTTP :: Dynamic Content :: REST"
]

# Core deps keep the wire and calculations lean.
dependencies = [
  "pydantic>=2.7.0",
  "typing-extensions>=4.9.0",
  "networkx>=3.2",         # for simple graph ops in digest/guards
  "fastjsonschema>=2.19.0" # JSON Schema validation for frames
]

[project.optional-dependencies]
# Run the HTTP bus and example clients
server = [
  "fastapi>=0.111.0",
  "uvicorn[standard]>=0.29.0",
  "httpx>=0.27.0"
]

# Observability hooks
obs = [
  "opentelemetry-api>=1.25.0",
  "opentelemetry-sdk>=1.25.0",
  "opentelemetry-exporter-otlp>=1.25.0"
]

# Witness marks / signatures
crypto = ["cryptography>=42.0.0"]

# Local tooling & tests
dev = [
  "ruff>=0.5.0",
  "mypy>=1.10.0",
  "pytest>=8.2.0",
  "pytest-cov>=4.1.0",
  "anyio>=4.4.0",
  "types-requests>=2.32.0.20240712"
]

[project.urls]
Homepage = "https://github.com/your-org/openline"
Issues = "https://github.com/your-org/openline/issues"
Documentation = "https://github.com/your-org/openline#readme"

# Optional: a tiny entrypoint to run the HTTP bus if you add a `main()` in fastapi_app.py
[project.scripts]
openline-http = "openline.adapters.fastapi_app:main"

# -------------------------
# Tooling Config
# -------------------------

[tool.ruff]
line-length = 100
target-version = "py311"
fix = true
lint.select = ["E","F","I","UP","B","N","ANN","T20"]
lint.ignore = ["ANN101","ANN102"] # skip self/cls annotations
lint.per-file-ignores = { "tests/**" = ["S101"] }

[tool.mypy]
python_version = "3.11"
strict = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unreachable = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
no_implicit_optional = true
plugins = ["pydantic.mypy"]
mypy_path = "openline"

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-q --cov=openline --cov-report=term-missing"
testpaths = ["tests"]

[tool.coverage.run]
branch = true
source = ["openline"]

[tool.coverage.report]
show_missing = true
skip_covered = true

# uv/packaging hints (works fine without these; included for clarity)
[tool.uv]
# lockfile will be uv.lock; groups map to optional-dependencies

# If you prefer dependency groups instead of extras, uncomment below and use:
#   uv sync --group dev --group server --group obs --group crypto
# [dependency-groups]
# dev = ["ruff>=0.5.0","mypy>=1.10.0","pytest>=8.2.0","pytest-cov>=4.1.0","anyio>=4.4.0","types-requests>=2.32.0.20240712"]
# server = ["fastapi>=0.111.0","uvicorn[standard]>=0.29.0","httpx>=0.27.0"]
# obs = ["opentelemetry-api>=1.25.0","opentelemetry-sdk>=1.25.0","opentelemetry-exporter-otlp>=1.25.0"]
# crypto = ["cryptography>=42.0.0"]
